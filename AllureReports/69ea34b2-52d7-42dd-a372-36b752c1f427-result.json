{"name": "test_booking", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=122.0.6261.128)\nStacktrace:\n\tGetHandleVerifier [0x003D8D03+51395]\n\t(No symbol) [0x00345F61]\n\t(No symbol) [0x001FE13A]\n\t(No symbol) [0x001E25F2]\n\t(No symbol) [0x00259B2B]\n\t(No symbol) [0x00269E66]\n\t(No symbol) [0x00253C26]\n\t(No symbol) [0x0022C629]\n\t(No symbol) [0x0022D40D]\n\tGetHandleVerifier [0x007568D3+3712147]\n\tGetHandleVerifier [0x00795CBA+3971194]\n\tGetHandleVerifier [0x00790FA8+3951464]\n\tGetHandleVerifier [0x00489D09+776393]\n\t(No symbol) [0x00351734]\n\t(No symbol) [0x0034C618]\n\t(No symbol) [0x0034C7C9]\n\t(No symbol) [0x0033DDF0]\n\tBaseThreadInitThunk [0x769E7BA9+25]\n\tRtlInitializeExceptionChain [0x7750BD2B+107]\n\tRtlClearBits [0x7750BCAF+191]", "trace": "@pytest.fixture()\n    def login():\n        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))\n        driver.get(\"https://scale.jaldee.com/visionhospital/\")\n>       driver.maximize_window()\n\nScale Selenium Project\\Consumer_Side_Appointment\\Consumer_SIde_Appointment_Reschedule_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024C217733E0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x769E7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7750BD2B+107]\\\\n\\\\tRtlClearBits [0x7750BCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x003D8D03+51395]\nE       \t(No symbol) [0x00345F61]\nE       \t(No symbol) [0x001FE13A]\nE       \t(No symbol) [0x001E25F2]\nE       \t(No symbol) [0x00259B2B]\nE       \t(No symbol) [0x00269E66]\nE       \t(No symbol) [0x00253C26]\nE       \t(No symbol) [0x0022C629]\nE       \t(No symbol) [0x0022D40D]\nE       \tGetHandleVerifier [0x007568D3+3712147]\nE       \tGetHandleVerifier [0x00795CBA+3971194]\nE       \tGetHandleVerifier [0x00790FA8+3951464]\nE       \tGetHandleVerifier [0x00489D09+776393]\nE       \t(No symbol) [0x00351734]\nE       \t(No symbol) [0x0034C618]\nE       \t(No symbol) [0x0034C7C9]\nE       \t(No symbol) [0x0033DDF0]\nE       \tBaseThreadInitThunk [0x769E7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7750BD2B+107]\nE       \tRtlClearBits [0x7750BCAF+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1711001370015, "stop": 1711001370015, "uuid": "bf4e729a-ef84-473d-b48f-cc0eb827f06e", "historyId": "f505a3a4d2d7ff162355118143c9ac34", "testCaseId": "f505a3a4d2d7ff162355118143c9ac34", "fullName": "Scale Selenium Project.Consumer_Side_Appointment.Consumer_SIde_Appointment_Reschedule_test#test_booking", "labels": [{"name": "parentSuite", "value": "Scale Selenium Project.Consumer_Side_Appointment"}, {"name": "suite", "value": "Consumer_SIde_Appointment_Reschedule_test"}, {"name": "host", "value": "DESKTOP-76R4R5F"}, {"name": "thread", "value": "5576-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Scale Selenium Project.Consumer_Side_Appointment.Consumer_SIde_Appointment_Reschedule_test"}]}