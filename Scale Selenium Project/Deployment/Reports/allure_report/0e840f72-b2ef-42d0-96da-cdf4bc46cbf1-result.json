{"name": "test_walkin_appointment[https://scale.jaldee.com/business/]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button _ngcontent-ymt-c329=\"\" type=\"button\" class=\"btn btn-primary mr-2 custom-btn-length text-center\" style=\"box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19) !important;\">...</button> is not clickable at point (227, 333). Other element would receive the click: <span class=\"mdc-list-item__primary-text\">...</span>\n  (Session info: chrome=122.0.6261.128)\nStacktrace:\n\tGetHandleVerifier [0x002C8D03+51395]\n\t(No symbol) [0x00235F61]\n\t(No symbol) [0x000EE13A]\n\t(No symbol) [0x0012B8A2]\n\t(No symbol) [0x0012A0D4]\n\t(No symbol) [0x0012813B]\n\t(No symbol) [0x0012731A]\n\t(No symbol) [0x0011E54E]\n\t(No symbol) [0x00143E8C]\n\t(No symbol) [0x0011DF7E]\n\t(No symbol) [0x00144124]\n\t(No symbol) [0x0015A570]\n\t(No symbol) [0x00143C26]\n\t(No symbol) [0x0011C629]\n\t(No symbol) [0x0011D40D]\n\tGetHandleVerifier [0x006468D3+3712147]\n\tGetHandleVerifier [0x00685CBA+3971194]\n\tGetHandleVerifier [0x00680FA8+3951464]\n\tGetHandleVerifier [0x00379D09+776393]\n\t(No symbol) [0x00241734]\n\t(No symbol) [0x0023C618]\n\t(No symbol) [0x0023C7C9]\n\t(No symbol) [0x0022DDF0]\n\tBaseThreadInitThunk [0x763B7BA9+25]\n\tRtlInitializeExceptionChain [0x7734BD2B+107]\n\tRtlClearBits [0x7734BCAF+191]\n\t(No symbol) [0x00000000]", "trace": "login = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2bc5df55fb62b868dab50c2762832f35\")>\n\n    @pytest.mark.parametrize('url', [\"https://scale.jaldee.com/business/\"])\n    def test_walkin_appointment(login):\n        time.sleep(5)\n        WebDriverWait(login, 20).until(\n            EC.element_to_be_clickable(\n                (By.XPATH, \"//div[contains(@class, 'font-small') and contains(text(),'Appointments')]\"))\n        ).click()\n        time.sleep(3)\n        element = WebDriverWait(login, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//div[contains(@class, 'my-1') and .//span[text()='Appointment']]\"))\n        )\n        element.click()\n        time.sleep(3)\n        wait = WebDriverWait(login, 10)\n        element_appoint = wait.until(EC.presence_of_element_located(\n            (By.XPATH, \"//b[contains(text(),'Create New Patient')]\")))\n        element_appoint.click()\n        login.implicitly_wait(3)\n        first_name, last_name, cons_manual_id, phonenumber, email = create_user_data()\n        login.find_element(By.XPATH, \"//input[@id='first_name']\").send_keys(str(first_name))\n        login.find_element(By.XPATH, \"//input[@id='last_name']\").send_keys(str(last_name))\n        login.find_element(By.XPATH, \"//*[@id='customer_id']\").send_keys(cons_manual_id)\n        login.find_element(By.XPATH, \"//*[@id='phone']\").send_keys(phonenumber)\n        login.find_element(By.XPATH, \"//ngx-intl-tel-input[@name='whatsApp']//input[@id='phone']\").send_keys(phonenumber)\n        login.find_element(By.XPATH, \"//input[@id='email_id']\").send_keys(email)\n        login.find_element(By.XPATH, \"//span[contains(text(),'Save')]\").click()\n        login.implicitly_wait(3)\n        WebDriverWait(login, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"p-dropdown[optionlabel='place']\"))\n        ).click()\n    \n        login.implicitly_wait(5)\n        login.find_element(By.XPATH, \"(//li[@id='p-highlighted-option'])[1]\").click()\n        print(\"location : Chavakkad\")\n        login.implicitly_wait(5)\n    \n        login.find_element(By.CSS_SELECTOR, \"p-dropdown[optionlabel='departmentName']\").click()\n        login.implicitly_wait(5)\n        login.find_element(By.XPATH, \"(//li[@aria-label='ENT'])[1]\").click()\n        print(\"Department : ENT\")\n        user_dropdown_xpath = (\"(//p-dropdown[@class='p-element p-inputwrapper p-inputwrapper-filled ng-untouched ng-valid \"\n                               \"ng-dirty'])[1]\")\n        WebDriverWait(login, 10).until(EC.element_to_be_clickable((By.XPATH, user_dropdown_xpath))).click()\n        user_option_xpath = \"(//li[@aria-label='Naveen KP'])[1]\"\n        WebDriverWait(login, 10).until(EC.element_to_be_clickable((By.XPATH, user_option_xpath))).click()\n        print(\"Select user : Naveen\")\n    \n        service_dropdown_xpath = \"//p-dropdown[@optionlabel='name']\"\n        element = login.find_element(By.XPATH, service_dropdown_xpath)\n        login.execute_script(\"arguments[0].scrollIntoView();\", element)\n        element.click()\n    \n        service_option_xpath = (\"(//div[@class='option-container ng-star-inserted'][normalize-space()='Naveen \"\n                                \"Consultation'])[2]\")\n        WebDriverWait(login, 10).until(EC.element_to_be_clickable((By.XPATH, service_option_xpath))).click()\n        print(\"Select Service : Naveen Consultation\")\n        time.sleep(3)\n        Today_Date = wait.until(EC.presence_of_element_located((By.XPATH,\n                                                                \"//span[@class='mat-calendar-body-cell-content mat-focus-indicator mat-calendar-body-selected mat-calendar-body-today']\")))\n        Today_Date.click()\n        print(\"Today Date:\", Today_Date.text)\n        wait = WebDriverWait(login, 10)\n        time_slot = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@aria-selected='true']\")))\n        time_slot.click()\n        print(\"Time Slot:\", time_slot.text)\n    \n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//a[contains(text(),'Notes')]\"))\n        ).click()\n    \n        login.find_element(By.XPATH, \"//textarea[@id='message']\").send_keys(\"Note for the walkin appointment\")\n    \n        WebDriverWait(login, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//span[normalize-space()='Save']\"))\n        ).click()\n        print(\"Note added for walkin appointment\")\n    \n        time.sleep(3)\n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//span[normalize-space()='Upload File']\"))\n        ).click()\n    \n        time.sleep(4)\n        pyautogui.write(r\"C:\\Users\\Archana\\PycharmProjects\\SeleniumPython\\test.png\")\n        pyautogui.press('enter')\n        print(\"Successfully upload the file\")\n    \n        time.sleep(4)\n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//span[contains(text(),'Confirm')]\"))\n        ).click()\n    \n        print(\"Appointment confirm successfully\")\n    \n        time.sleep(5)\n    \n        while True:\n            try:\n                next_button = WebDriverWait(login, 10).until(\n                    EC.presence_of_element_located(\n                        (By.XPATH, \"//anglerighticon[@class='p-element p-icon-wrapper ng-star-inserted']\"))\n                )\n    \n                next_button.click()\n    \n            except:\n                break\n    \n        last_element_in_accordian = WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//div[contains(@class, 'card my-1 p-0 ng-star-inserted')][last()]\"))\n        )\n        last_element_in_accordian.click()\n    \n        time.sleep(3)\n        View_Detail_button = WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//button[contains(text(), 'View Details')]\"))\n        )\n        View_Detail_button.click()\n    \n        time.sleep(3)\n        more_actions_button = WebDriverWait(login, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//button[normalize-space()='More Actions']\"))\n        )\n        more_actions_button.click()\n        # ****************************** Send Message ****************************\n        time.sleep(5)\n        WebDriverWait(login, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//button[normalize-space()='Send Message']\"))\n        ).click()\n    \n        login.find_element(By.XPATH, \" //textarea[@id='messageData']\").send_keys(\"Send Message to the Patient\")\n    \n        time.sleep(2)\n        WebDriverWait(login, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Click here to select the files']\"))\n        ).click()\n    \n        time.sleep(4)\n        pyautogui.write(r\"C:\\Users\\Archana\\PycharmProjects\\SeleniumPython\\test.png\")\n        pyautogui.press('enter')\n    \n        time.sleep(2)\n    \n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//span[contains(text(),'send')]\"))\n        ).click()\n    \n        print(\"Send Message Successfully\")\n    \n        # ******************* Send Attachment ************************\n        time.sleep(5)\n        WebDriverWait(login, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//button[normalize-space()='Send Attachments']\"))\n        ).click()\n    \n        WebDriverWait(login, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//label[normalize-space()='Click here to select the files']\"))\n        ).click()\n    \n        time.sleep(3)\n        pyautogui.write(r\"C:\\Users\\Archana\\PycharmProjects\\SeleniumPython\\test.png\")\n        pyautogui.press('enter')\n    \n        time.sleep(2)\n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//span[contains(text(),'send')]\"))\n        ).click()\n    \n        print(\"Attachment Send Successfully\")\n    \n        # ********************* Create the Prescription and Sharing *************************\n    \n        time.sleep(5)\n        WebDriverWait(login, 10)\n        login.find_element(By.XPATH, \"//span[normalize-space()='Prescriptions']\").click()\n    \n        for i in range(5):\n            login.find_element(By.XPATH, \"//div[@class='add']\").click()\n            login.find_element(By.XPATH, \"//input[@role='searchbox']\").send_keys(\"Medicine\")\n    \n            before_XPath = \"//*[contains(@id, 'pr_id')]/tbody/tr\"\n            aftertd_XPath_1 = \"/td[2]\"\n            aftertd_XPath_2 = \"/td[3]\"\n            aftertd_XPath_3 = \"/td[4]\"\n            aftertd_XPath_4 = \"/td[5]\"\n            textarea_xpath = \"/p-celleditor/textarea\"\n            row = i + 1\n            if i > 0:\n                trXPath = before_XPath + str([row])\n            else:\n                trXPath = before_XPath\n    \n            PreFinalXPath = trXPath + aftertd_XPath_1\n            FinalXPath = PreFinalXPath + textarea_xpath\n    \n            Dose = login.find_element(By.XPATH, PreFinalXPath)\n            Dose.click()\n            Dose1 = login.find_element(By.XPATH, FinalXPath)\n            Dose1.send_keys(\"650 mg\")\n    \n            PreFinalXPath = trXPath + aftertd_XPath_2\n            FinalXPath = PreFinalXPath + textarea_xpath\n    \n            Frequency = login.find_element(By.XPATH, PreFinalXPath)\n            Frequency.click()\n            Frequency1 = login.find_element(By.XPATH, FinalXPath)\n            Frequency1.send_keys(\"1-1-1\")\n    \n            PreFinalXPath = trXPath + aftertd_XPath_3\n            FinalXPath = PreFinalXPath + textarea_xpath\n            Duration = login.find_element(By.XPATH, PreFinalXPath)\n            Duration.click()\n            Duration1 = login.find_element(By.XPATH, FinalXPath)\n            Duration1.send_keys(\"5 Days\")\n    \n            PreFinalXPath = trXPath + aftertd_XPath_4\n            FinalXPath = PreFinalXPath + textarea_xpath\n            Notes = login.find_element(By.XPATH, PreFinalXPath)\n            Notes.click()\n            Notes1 = login.find_element(By.XPATH, FinalXPath)\n            Notes1.send_keys(\"After Food\")\n    \n        dropdown_locator_xpath = \"/html[1]/body[1]/app-root[1]/app-business[1]/div[1]/div[1]/div[1]/app-provider-appointment-detail[1]/div[1]/div[1]/div[1]/div[1]/app-booking-details[1]/div[2]/app-customer-record[1]/div[1]/div[2]/div[1]/app-prescriptions[1]/div[1]/div[1]/div[2]/div[1]/app-create[1]/div[1]/div[3]/div[1]/span[1]/mat-select[1]\"\n        dropdown_element = WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, dropdown_locator_xpath)))\n    \n        dropdown_element.click()\n    \n        option_locator_xpath = \"//div[normalize-space()='Naveen KP']\"\n        option_element = WebDriverWait(login, 10).until(EC.element_to_be_clickable((By.XPATH, option_locator_xpath)))\n    \n        option_element.click()\n    \n        login.find_element(By.XPATH, \"//button[normalize-space()='Save']\").click()\n        time.sleep(5)\n        print(\"prescription created successfully\")\n    \n        login.find_element(By.XPATH, \"//img[@alt='share']\").click()\n    \n        login.find_element(By.XPATH, \"//textarea[@placeholder='Enter message description']\").send_keys(\n            \"prescription message\")\n    \n        login.find_element(By.XPATH, \"(//input[@class='mdc-checkbox__native-control'])[1]\").click()\n        login.find_element(By.XPATH, \"//button[@type='button'][normalize-space()='Share']\").click()\n        print(\"Prescription Shared Successfully\")\n    \n        # ************************* Case Creation and Sharing *********************\n    \n        time.sleep(5)\n        WebDriverWait(login, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Patient Record']\"))\n        ).click()\n    \n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//button[normalize-space()='+ Create Case']\"))\n        ).click()\n    \n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//input[@placeholder='Enter Case Description']\"))\n        ).send_keys(\"test case for case\")\n    \n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//button[normalize-space()='Save']\"))\n        ).click()\n    \n        WebDriverWait(login, 10).until(\n            EC.presence_of_element_located((By.XPATH, \"//input[@placeholder = 'Enter Chief Complaint']\"))\n        ).send_keys(\"Fever\")\n    \n        element = login.find_element(By.XPATH, \"//button[normalize-space()='Save']\")\n        login.execute_script(\"arguments[0].scrollIntoView();\", element)\n>       element.click()\n\nPre Deployment.py:279: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A0F58C62D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\tRtlInitializeExceptionChain [0x7734BD2B+107]\\\\n\\\\tRtlClearBits [0x7734BCAF+191]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button _ngcontent-ymt-c329=\"\" type=\"button\" class=\"btn btn-primary mr-2 custom-btn-length text-center\" style=\"box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19) !important;\">...</button> is not clickable at point (227, 333). Other element would receive the click: <span class=\"mdc-list-item__primary-text\">...</span>\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x002C8D03+51395]\nE       \t(No symbol) [0x00235F61]\nE       \t(No symbol) [0x000EE13A]\nE       \t(No symbol) [0x0012B8A2]\nE       \t(No symbol) [0x0012A0D4]\nE       \t(No symbol) [0x0012813B]\nE       \t(No symbol) [0x0012731A]\nE       \t(No symbol) [0x0011E54E]\nE       \t(No symbol) [0x00143E8C]\nE       \t(No symbol) [0x0011DF7E]\nE       \t(No symbol) [0x00144124]\nE       \t(No symbol) [0x0015A570]\nE       \t(No symbol) [0x00143C26]\nE       \t(No symbol) [0x0011C629]\nE       \t(No symbol) [0x0011D40D]\nE       \tGetHandleVerifier [0x006468D3+3712147]\nE       \tGetHandleVerifier [0x00685CBA+3971194]\nE       \tGetHandleVerifier [0x00680FA8+3951464]\nE       \tGetHandleVerifier [0x00379D09+776393]\nE       \t(No symbol) [0x00241734]\nE       \t(No symbol) [0x0023C618]\nE       \t(No symbol) [0x0023C7C9]\nE       \t(No symbol) [0x0022DDF0]\nE       \tBaseThreadInitThunk [0x763B7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7734BD2B+107]\nE       \tRtlClearBits [0x7734BCAF+191]\nE       \t(No symbol) [0x00000000]\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "c74bdc14-eaf9-4670-b15a-a7e2d582082d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "url", "value": "'https://scale.jaldee.com/business/'"}], "start": 1710503125077, "stop": 1710503221363, "uuid": "4ab1be16-b112-4f06-bd0d-8c52d6f318d2", "historyId": "8f8eb7f381f1231c98f87aef4d87979b", "testCaseId": "fa4ba00736420b982db80e2d26cf3a23", "fullName": "Pre Deployment#test_walkin_appointment", "labels": [{"name": "suite", "value": "Pre Deployment"}, {"name": "host", "value": "DESKTOP-76R4R5F"}, {"name": "thread", "value": "12432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Pre Deployment"}]}