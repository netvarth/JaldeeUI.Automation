{"name": "test_walkin_appointment[https://scale.jaldee.com/business/]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: received Inspector.detached event\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=122.0.6261.128)\nStacktrace:\n\tGetHandleVerifier [0x002C8D03+51395]\n\t(No symbol) [0x00235F61]\n\t(No symbol) [0x000EE13A]\n\t(No symbol) [0x000E02C3]\n\t(No symbol) [0x000DF98A]\n\t(No symbol) [0x000DED73]\n\t(No symbol) [0x000DECA3]\n\t(No symbol) [0x000DD98B]\n\t(No symbol) [0x000DE1CD]\n\t(No symbol) [0x000F09D5]\n\t(No symbol) [0x000F101C]\n\t(No symbol) [0x000F3E69]\n\t(No symbol) [0x000F3F00]\n\t(No symbol) [0x00126008]\n\t(No symbol) [0x001263EB]\n\t(No symbol) [0x0015C162]\n\t(No symbol) [0x00143ED4]\n\t(No symbol) [0x0015A570]\n\t(No symbol) [0x00143C26]\n\t(No symbol) [0x0011C629]\n\t(No symbol) [0x0011D40D]\n\tGetHandleVerifier [0x006468D3+3712147]\n\tGetHandleVerifier [0x00685CBA+3971194]\n\tGetHandleVerifier [0x00680FA8+3951464]\n\tGetHandleVerifier [0x00379D09+776393]\n\t(No symbol) [0x00241734]\n\t(No symbol) [0x0023C618]\n\t(No symbol) [0x0023C7C9]\n\t(No symbol) [0x0022DDF0]\n\tBaseThreadInitThunk [0x763B7BA9+25]\n\tRtlInitializeExceptionChain [0x7734BD2B+107]\n\tRtlClearBits [0x7734BCAF+191]\n\t(No symbol) [0x00000000]", "trace": "login = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"19c19e6bfe65faf1e5d07d34d1d3988d\")>\n\n    @pytest.mark.parametrize('url', [\"https://scale.jaldee.com/business/\"])\n    def test_walkin_appointment(login):\n        time.sleep(5)\n>       WebDriverWait(login, 20).until(\n            EC.element_to_be_clickable(\n                (By.XPATH, \"//div[contains(@class, 'font-small') and contains(text(),'Appointments')]\"))\n        ).click()\n\nPre Deployment.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B9DB938EC0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: received Inspector.detached event\\...\\tRtlInitializeExceptionChain [0x7734BD2B+107]\\\\n\\\\tRtlClearBits [0x7734BCAF+191]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: received Inspector.detached event\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=122.0.6261.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x002C8D03+51395]\nE       \t(No symbol) [0x00235F61]\nE       \t(No symbol) [0x000EE13A]\nE       \t(No symbol) [0x000E02C3]\nE       \t(No symbol) [0x000DF98A]\nE       \t(No symbol) [0x000DED73]\nE       \t(No symbol) [0x000DECA3]\nE       \t(No symbol) [0x000DD98B]\nE       \t(No symbol) [0x000DE1CD]\nE       \t(No symbol) [0x000F09D5]\nE       \t(No symbol) [0x000F101C]\nE       \t(No symbol) [0x000F3E69]\nE       \t(No symbol) [0x000F3F00]\nE       \t(No symbol) [0x00126008]\nE       \t(No symbol) [0x001263EB]\nE       \t(No symbol) [0x0015C162]\nE       \t(No symbol) [0x00143ED4]\nE       \t(No symbol) [0x0015A570]\nE       \t(No symbol) [0x00143C26]\nE       \t(No symbol) [0x0011C629]\nE       \t(No symbol) [0x0011D40D]\nE       \tGetHandleVerifier [0x006468D3+3712147]\nE       \tGetHandleVerifier [0x00685CBA+3971194]\nE       \tGetHandleVerifier [0x00680FA8+3951464]\nE       \tGetHandleVerifier [0x00379D09+776393]\nE       \t(No symbol) [0x00241734]\nE       \t(No symbol) [0x0023C618]\nE       \t(No symbol) [0x0023C7C9]\nE       \t(No symbol) [0x0022DDF0]\nE       \tBaseThreadInitThunk [0x763B7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7734BD2B+107]\nE       \tRtlClearBits [0x7734BCAF+191]\nE       \t(No symbol) [0x00000000]\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "url", "value": "'https://scale.jaldee.com/business/'"}], "start": 1710503024758, "stop": 1710503035515, "uuid": "5c6e6edb-7fd6-4050-8077-147154ed5e8f", "historyId": "8f8eb7f381f1231c98f87aef4d87979b", "testCaseId": "fa4ba00736420b982db80e2d26cf3a23", "fullName": "Pre Deployment#test_walkin_appointment", "labels": [{"name": "suite", "value": "Pre Deployment"}, {"name": "host", "value": "DESKTOP-76R4R5F"}, {"name": "thread", "value": "9616-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Pre Deployment"}]}